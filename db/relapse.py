from sqlalchemy import Column, Integer, String, DateTime, Text
from typing import List
from datetime import datetime, timezone
from db.base import Base, SessionLocal


class RelapseSession(Base):
    __tablename__ = "relapse_sessions"

    id = Column(Integer, primary_key=True, autoincrement=True)
    user_id = Column(Integer, index=True)
    current_step = Column(String(255), nullable=True)
    situation = Column(String(255), nullable=True)
    thoughts = Column(Text, nullable=True)
    emotion_type = Column(String(50), nullable=True)
    emotion_score = Column(Integer, nullable=True)
    physical = Column(Text, nullable=True)
    behavior = Column(Text, nullable=True)
    timestamp = Column(DateTime, default=lambda: datetime.now(timezone.utc))


def get_relapse_sessions(user_id: int):
    session = SessionLocal()
    try:
        sessions = (
            session.query(RelapseSession)
            .filter(RelapseSession.user_id == user_id)
            .all()
        )
        return sessions
    finally:
        session.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–µ—Å—Å–∏–π —Ä–µ—Ü–∏–¥–∏–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def add_new_relapse_session(user_id: int, relapse_session: dict):
    session = SessionLocal()
    try:
        relapse_session = RelapseSession(
            user_id=user_id,
            timestamp=relapse_session.get("date_time", datetime.now(timezone.utc)),
        )
        session.add(relapse_session)
        session.commit()
    finally:
        session.close()


def get_last_relapse_session(user_id: int):
    session = SessionLocal()
    try:
        last_session = (
            session.query(RelapseSession)
            .filter(RelapseSession.user_id == user_id)
            .order_by(RelapseSession.timestamp.desc())
            .first()
        )
        return last_session
    finally:
        session.close()


# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–µ—Å—Å–∏–∏ —Ä–µ—Ü–∏–¥–∏–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def update_last_relapse_session(user_id: int, relapse_session: RelapseSession):
    session = SessionLocal()
    try:
        relapse_session.user_id = user_id
        session.add(relapse_session)
        session.commit()
    finally:
        session.close()


def get_all_notes(user_id: int):
    sess = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏ —Ä–µ—Ü–∏–¥–∏–≤–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        sessions = (
            sess.query(RelapseSession)
            .filter(RelapseSession.user_id == user_id)
            .order_by(RelapseSession.timestamp.desc())
            .all()
        )

        if not sessions:
            return None

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∑–∞–º–µ—Ç–∫–∞–º–∏
        notes_text = ""
        for idx, s in enumerate(sessions, 1):
            notes_text += f"üìÑ *–ó–∞–º–µ—Ç–∫–∞ {idx}*\n"
            notes_text += f"üóì *–î–∞—Ç–∞*: {s.timestamp.strftime('%Y-%m-%d %H:%M') if s.timestamp else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            notes_text += f"üìç *–°–∏—Ç—É–∞—Ü–∏—è*: {s.situation or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            notes_text += f"üí≠ *–ú—ã—Å–ª–∏*: {s.thoughts or '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}\n"
            notes_text += f"üò∂‚Äçüå´Ô∏è *–≠–º–æ—Ü–∏–∏*: {s.emotion_type or '–ù–µ —É–∫–∞–∑–∞–Ω—ã'} (–û—Ü–µ–Ω–∫–∞: {s.emotion_score or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'})\n"
            notes_text += f"üí™ *–§–∏–∑–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ*: {s.physical or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            notes_text += f"üéØ *–ü–æ–≤–µ–¥–µ–Ω–∏–µ*: {s.behavior or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            notes_text += f"{'-'*30}\n\n"

        return notes_text
    finally:
        sess.close()
