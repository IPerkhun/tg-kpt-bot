from aiogram import types
from aiogram import types, Bot
from aiogram.types import (
    ContentType,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
)

# from db.data_manager import get_user_data, update_user_data, get_last_relapse_session
from db.relapse import (
    RelapseSession,
    timezone,
    get_last_relapse_session,
    update_last_relapse_session,
    add_new_relapse_session,
)

from datetime import datetime
from modules.gpt_therapist import GPTTherapist
from utils.content import (
    RELAPSE_QUIZ_START_MESSAGE,
    RELAPSE_QUIZ_SITUATION_PROMPT,
    RELAPSE_QUIZ_CUSTOM_SITUATION_PROMPT,
    RELAPSE_QUIZ_THOUGHTS_PROMPT,
    RELAPSE_QUIZ_CUSTOM_THOUGHTS_PROMPT,
    RELAPSE_QUIZ_EMOTIONS_PROMPT,
    RELAPSE_QUIZ_EMOTION_SCORE_PROMPT,
    RELAPSE_QUIZ_PHYSICAL_PROMPT,
    RELAPSE_QUIZ_CUSTOM_PHYSICAL_PROMPT,
    RELAPSE_QUIZ_BEHAVIOR_PROMPT,
    RELAPSE_QUIZ_CUSTOM_BEHAVIOR_PROMPT,
    RELAPSE_QUIZ_FINISH_MESSAGE,
    RELAPSE_QUIZ_ERROR_MESSAGE,
)


async def start_relapse_quiz(message: types.Message):
    user_id = message.from_user.id
    new_session = {
        "user_id": user_id,
    }
    add_new_relapse_session(user_id, new_session)
    last_session = get_last_relapse_session(user_id)
    await message.answer(
        RELAPSE_QUIZ_START_MESSAGE.format(
            date_time=last_session.timestamp.strftime("%d.%m.%Y %H:%M:%S")
        ),
        reply_markup=ReplyKeyboardRemove(),
    )

    await ask_situation(message)


async def ask_situation(message: types.Message):
    user_id = message.from_user.id
    last_session = get_last_relapse_session(user_id)
    last_session.current_step = "relapse_situation"
    update_last_relapse_session(user_id, last_session)

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–î–æ–º–∞")],
            [KeyboardButton(text="–ù–∞ —Ä–∞–±–æ—Ç–µ")],
            [KeyboardButton(text="–ù–∞ –≤–µ—á–µ—Ä–∏–Ω–∫–µ")],
            [KeyboardButton(text="–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç")],
        ],
        resize_keyboard=True,
    )
    await message.answer(RELAPSE_QUIZ_SITUATION_PROMPT, reply_markup=keyboard)


async def handle_relapse_situation(message: types.Message):
    user_id = message.from_user.id
    last_session = get_last_relapse_session(user_id)

    if message.text == "–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç":
        last_session.current_step = "relapse_custom_situation"
        update_last_relapse_session(user_id, last_session)
        await message.answer(
            RELAPSE_QUIZ_CUSTOM_SITUATION_PROMPT, reply_markup=ReplyKeyboardRemove()
        )
    else:
        last_session.situation = message.text
        last_session.current_step = "relapse_thoughts"
        update_last_relapse_session(user_id, last_session)
        await ask_thoughts(message)


async def ask_thoughts(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–Ø –Ω–µ –≤—ã–¥–µ—Ä–∂—É –±–µ–∑ —Å–∏–≥–∞—Ä–µ—Ç—ã")],
            [
                KeyboardButton(
                    text="–Ø –ø—Ä–æ—Å—Ç–æ —Ö–æ—á—É —Å–¥–∞—Ç—å—Å—è —Ç–∞–∫ –∫–∞–∫ –Ω–µ –≤–∏–∂—É –≤ —ç—Ç–æ–º —Å–º—ã—Å–ª–∞"
                )
            ],
            [KeyboardButton(text="–°–∏–≥–∞—Ä–µ—Ç–∞ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ —Å–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")],
            [KeyboardButton(text="–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç")],
        ],
        resize_keyboard=True,
    )
    await message.answer(RELAPSE_QUIZ_THOUGHTS_PROMPT, reply_markup=keyboard)


async def handle_relapse_thoughts(message: types.Message):
    user_id = message.from_user.id
    last_session = get_last_relapse_session(user_id)

    if message.text == "–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç":
        last_session.current_step = "relapse_custom_thoughts"
        update_last_relapse_session(user_id, last_session)
        await message.answer(
            RELAPSE_QUIZ_CUSTOM_THOUGHTS_PROMPT, reply_markup=ReplyKeyboardRemove()
        )
    else:
        last_session.thoughts = message.text
        last_session.current_step = "relapse_emotions"
        update_last_relapse_session(user_id, last_session)
        await ask_emotions(message)


async def ask_emotions(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–°—Ç—Ä–µ—Å—Å")],
            [KeyboardButton(text="–¢—Ä–µ–≤–æ–≥–∞")],
            [KeyboardButton(text="–ó–ª–æ—Å—Ç—å")],
            [KeyboardButton(text="–í–æ–∑–±—É–∂–¥–µ–Ω–∏–µ")],
        ],
        resize_keyboard=True,
    )
    await message.answer(RELAPSE_QUIZ_EMOTIONS_PROMPT, reply_markup=keyboard)


async def handle_relapse_emotions(message: types.Message):
    user_id = message.from_user.id
    last_session = get_last_relapse_session(user_id)
    last_session.emotion_type = message.text
    last_session.current_step = "relapse_emotion_score"
    update_last_relapse_session(user_id, last_session)

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="1"),
                KeyboardButton(text="2"),
                KeyboardButton(text="3"),
                KeyboardButton(text="4"),
                KeyboardButton(text="5"),
            ]
        ],
        resize_keyboard=True,
    )
    await message.answer(
        RELAPSE_QUIZ_EMOTION_SCORE_PROMPT.format(emotion_type=message.text),
        reply_markup=keyboard,
    )


async def handle_relapse_emotion_score(message: types.Message):
    user_id = message.from_user.id
    last_session = get_last_relapse_session(user_id)

    try:
        emotion_score = int(message.text)
        if emotion_score < 1 or emotion_score > 5:
            raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5.")
        return

    last_session.emotion_score = emotion_score
    last_session.current_step = "relapse_physical"
    update_last_relapse_session(user_id, last_session)
    await ask_physical(message)


async def ask_physical(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ú–∞–Ω–∏—è")],
            [KeyboardButton(text="–¢—Ä—è—Å—É—â–∏–µ—Å—è —Ä—É–∫–∏")],
            [KeyboardButton(text="–í—Å–µ –æ–∫–µ–π ")],
            [KeyboardButton(text="–î—Ä—É–≥–æ–µ")],
        ],
        resize_keyboard=True,
    )
    await message.answer(RELAPSE_QUIZ_PHYSICAL_PROMPT, reply_markup=keyboard)


async def handle_relapse_physical(message: types.Message, bot: Bot):
    user_id = message.from_user.id
    last_session = get_last_relapse_session(user_id)

    if message.content_type == ContentType.VOICE:
        voice_message_id = message.voice.file_id
        last_session.physical = f"–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {voice_message_id}"
        file = await bot.get_file(voice_message_id)
        # last_session.voice_message = file.file_path
        last_session.current_step = "relapse_behavior"
        update_last_relapse_session(user_id, last_session)
        await ask_behavior(message)
        return

    if message.text == "–î—Ä—É–≥–æ–µ":
        last_session.current_step = "relapse_custom_physical"
        update_last_relapse_session(user_id, last_session)
        await message.answer(
            RELAPSE_QUIZ_CUSTOM_PHYSICAL_PROMPT, reply_markup=ReplyKeyboardRemove()
        )
    else:
        last_session.physical = message.text
        last_session.current_step = "relapse_behavior"
        update_last_relapse_session(user_id, last_session)
        await ask_behavior(message)


async def ask_behavior(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü–æ–ø–∏—Ç—å —á–∞–π")],
            [KeyboardButton(text="–ü–æ–¥—ã—à–∞—Ç—å —Å–≤–µ–∂–∏–º –≤–æ–∑–¥—É—Ö–æ–º")],
            [KeyboardButton(text="–ù–∞–±—Ä–∞—Ç—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –±–ª–∏–∑–∫–æ–º—É —á–µ–ª–æ–≤–µ–∫—É")],
            [KeyboardButton(text="–î—Ä—É–≥–æ–µ")],
        ],
        resize_keyboard=True,
    )
    await message.answer(RELAPSE_QUIZ_BEHAVIOR_PROMPT, reply_markup=keyboard)


async def handle_relapse_behavior(message: types.Message):
    user_id = message.from_user.id
    last_session = get_last_relapse_session(user_id)

    if message.text == "–î—Ä—É–≥–æ–µ":
        last_session.current_step = "relapse_custom_behavior"
        update_last_relapse_session(user_id, last_session)
        await message.answer(
            RELAPSE_QUIZ_CUSTOM_BEHAVIOR_PROMPT, reply_markup=ReplyKeyboardRemove()
        )
    else:
        last_session.behavior = message.text
        last_session.current_step = "relapse_done"
        update_last_relapse_session(user_id, last_session)
        await finish_relapse_quiz(message)


async def finish_relapse_quiz(message: types.Message):
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é —Ä–µ—Ü–∏–¥–∏–≤–∞ –∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏
    last_session = get_last_relapse_session(user_id)

    situation = last_session.situation
    thoughts = last_session.thoughts
    emotion_type = last_session.emotion_type
    emotion_score = last_session.emotion_score
    physical = last_session.physical
    behavior = last_session.behavior

    last_session.current_step = None
    update_last_relapse_session(user_id, last_session)

    text = (
        f"üìù *–¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã:*\n\n"
        f"*–°–∏—Ç—É–∞—Ü–∏—è:* {situation}\n"
        f"*–ú—ã—Å–ª–∏:* {thoughts}\n"
        f"*–≠–º–æ—Ü–∏–∏:* {emotion_type} (–û—Ü–µ–Ω–∫–∞: {emotion_score})\n"
        f"*–§–∏–∑–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:* {physical}\n"
        f"*–ü–æ–≤–µ–¥–µ–Ω–∏–µ:* {behavior}\n"
    )

    await message.answer(
        RELAPSE_QUIZ_FINISH_MESSAGE,
        reply_markup=ReplyKeyboardRemove(),
        parse_mode="Markdown",
    )

    response = GPTTherapist().get_help(text)
    await message.answer(text, parse_mode="Markdown")
    await message.answer(response, parse_mode="Markdown")


async def handle_relapse_custom_message(message: types.Message):
    user_id = message.from_user.id
    last_session = get_last_relapse_session(user_id)
    current_step = last_session.current_step

    if current_step == "relapse_custom_situation":
        last_session.situation = message.text
        last_session.current_step = "relapse_thoughts"
        update_last_relapse_session(user_id, last_session)
        await ask_thoughts(message)

    elif current_step == "relapse_custom_thoughts":
        last_session.thoughts = message.text
        last_session.current_step = "relapse_emotions"
        update_last_relapse_session(user_id, last_session)
        await ask_emotions(message)

    elif current_step == "relapse_custom_physical":
        last_session.physical = message.text
        last_session.current_step = "relapse_behavior"
        update_last_relapse_session(user_id, last_session)
        await ask_behavior(message)

    elif current_step == "relapse_custom_behavior":
        last_session.behavior = message.text
        last_session.current_step = "relapse_done"
        update_last_relapse_session(user_id, last_session)
        await finish_relapse_quiz(message)

    else:
        await message.answer(RELAPSE_QUIZ_ERROR_MESSAGE)
        await start_relapse_quiz(message)


RELAPSE_HANDLERS_MAP = {
    "relapse_situation": handle_relapse_situation,
    "relapse_thoughts": handle_relapse_thoughts,
    "relapse_custom_situation": handle_relapse_custom_message,
    "relapse_custom_thoughts": handle_relapse_custom_message,
    "relapse_custom_physical": handle_relapse_custom_message,
    "relapse_custom_behavior": handle_relapse_custom_message,
    "relapse_emotions": handle_relapse_emotions,
    "relapse_emotion_score": handle_relapse_emotion_score,
    "relapse_physical": handle_relapse_physical,
    "relapse_behavior": handle_relapse_behavior,
}


async def handle_relapse_step(message: types.Message, bot: Bot):
    user_id = message.from_user.id
    last_session = get_last_relapse_session(user_id)
    current_step = last_session.current_step

    handler = RELAPSE_HANDLERS_MAP.get(current_step)
    if handler:
        if current_step in ["relapse_physical"]:
            await handler(message, bot)
        else:
            await handler(message)
    else:
        await message.answer(
            "handle_relapse_step - –ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π —à–∞–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
