from aiogram import types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from db.data_manager import (
    get_last_start_quiz,
    update_last_start_quiz,
    get_user_data,
    update_user_data,
)
from utils.content import (
    WELCOME_MESSAGE,
    STEP1_CIGARETTES_MESSAGE,
    STEP1_ELECTRONIC_MESSAGE,
    STEP1_HOOKAH_MESSAGE,
    STEP1_IQOS_MESSAGE,
    STEP2_MESSAGE,
    STEP3_MESSAGE,
    CUSTOM_REASON_PROMPT,
    FINISH_QUIZ_MESSAGE,
)
from utils.data_models import StartQuiz


# –°—Ç–∞—Ä—Ç –∫–≤–∏–∑–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É—Å—Ç–æ–π –∑–∞–ø–∏—Å–∏ –≤ start_quizes
async def start_quiz(message: types.Message):
    user_id = message.from_user.id
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø—É—Å—Ç–æ–π –∫–≤–∏–∑
    new_quiz = StartQuiz().to_dict()
    new_quiz["current_step"] = "step1"
    user_data = get_user_data(user_id)
    user_data["start_quizes"].append(new_quiz)
    update_user_data(user_id, user_data)

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–°–∏–≥–∞—Ä–µ—Ç—ã")],
            [KeyboardButton(text="–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è —Å–∏–≥–∞—Ä–µ—Ç–∞ –∏–ª–∏ HQD")],
            [KeyboardButton(text="–ö–∞–ª—å—è–Ω")],
            [KeyboardButton(text="–ê–π–∫–æ—Å")],
        ],
        resize_keyboard=True,
    )
    await message.answer(WELCOME_MESSAGE, reply_markup=keyboard, parse_mode="Markdown")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞ (–≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∫—É—Ä–µ–Ω–∏—è)
async def handle_quiz_step1(message: types.Message):
    user_id = message.from_user.id
    last_quiz = get_last_start_quiz(user_id)

    last_quiz["smoking_type"] = message.text
    last_quiz["current_step"] = "step2"
    update_last_start_quiz(user_id, last_quiz)

    if message.text == "–°–∏–≥–∞—Ä–µ—Ç—ã":
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–î–æ 5 —à—Ç—É–∫ –≤ –¥–µ–Ω—å üòå")],
                [KeyboardButton(text="–î–æ 10, –Ω–æ –¥–µ—Ä–∂—É—Å—å üò¨")],
                [KeyboardButton(text="–ë–æ–ª—å—à–µ 15, —ç—Ç–æ —É–∂–µ —Å–µ—Ä—å–µ–∑–Ω–æ üòÖ")],
                [KeyboardButton(text="–¶–µ–ª–∞—è –ø–∞—á–∫–∞ –∏ –±–æ–ª—å—à–µ –≤ –¥–µ–Ω—å üö¨")],
            ],
            resize_keyboard=True,
        )
        await message.answer(STEP1_CIGARETTES_MESSAGE, reply_markup=keyboard)

    elif message.text == "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è —Å–∏–≥–∞—Ä–µ—Ç–∞ –∏–ª–∏ HQD":
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ó–∞—Ä—è–∂–∞—é—Å—å —É—Ç—Ä–æ–º –∏–ª–∏ –≤–µ—á–µ—Ä–æ–º ‚ö°Ô∏è")],
                [KeyboardButton(text="–î—ã–º–ª—é –∫–∞–∂–¥—ã–µ 2-3 —á–∞—Å–∞ ‚è∞")],
                [
                    KeyboardButton(
                        text="–≠–ª–µ–∫—Ç—Ä–æ–Ω–∫–∞ –≤—Å–µ–≥–¥–∞ —Å–æ –º–Ω–æ–π, –∫–∞–∂–¥—ã–µ 20-30 –º–∏–Ω—É—Ç üîã"
                    )
                ],
            ],
            resize_keyboard=True,
        )
        await message.answer(STEP1_ELECTRONIC_MESSAGE, reply_markup=keyboard)

    elif message.text == "–ö–∞–ª—å—è–Ω":
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–¢–æ–ª—å–∫–æ –ø–æ –≤—ã—Ö–æ–¥–Ω—ã–º üå¥")],
                [KeyboardButton(text="2-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é üòé")],
                [KeyboardButton(text="–ö–∞–∂–¥—ã–π –¥–µ–Ω—å, –±–µ–∑ –∫–∞–ª—å—è–Ω–∞ –Ω–∏–∫—É–¥–∞ üí®")],
            ],
            resize_keyboard=True,
        )
        await message.answer(STEP1_HOOKAH_MESSAGE, reply_markup=keyboard)

    elif message.text == "–ê–π–∫–æ—Å":
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ú–µ–Ω–µ–µ 5")],
                [KeyboardButton(text="–ú–µ–Ω–µ–µ 10")],
                [KeyboardButton(text="–ë–æ–ª–µ–µ 15")],
                [KeyboardButton(text="1 –ø–∞—á–∫–∞ –∏ –±–æ–ª–µ–µ –≤ –¥–µ–Ω—å")],
            ],
            resize_keyboard=True,
        )
        await message.answer(STEP1_IQOS_MESSAGE, reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ —à–∞–≥–∞ (–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å)
async def handle_quiz_step2(message: types.Message):
    user_id = message.from_user.id
    last_quiz = get_last_start_quiz(user_id)

    last_quiz["intensity"] = message.text
    last_quiz["current_step"] = "step3"
    update_last_start_quiz(user_id, last_quiz)

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ú–µ–Ω—å—à–µ –≥–æ–¥–∞")],
            [KeyboardButton(text="1-3 –≥–æ–¥–∞")],
            [KeyboardButton(text="5-10 –ª–µ—Ç")],
            [KeyboardButton(text="–ë–æ–ª–µ–µ 10 –ª–µ—Ç")],
        ],
        resize_keyboard=True,
    )
    await message.answer(STEP2_MESSAGE, reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–µ—Ç—å–µ–≥–æ —à–∞–≥–∞ (—Å—Ç–∞–∂ –∫—É—Ä–µ–Ω–∏—è)
async def handle_quiz_step3(message: types.Message):
    user_id = message.from_user.id
    last_quiz = get_last_start_quiz(user_id)

    last_quiz["period"] = message.text
    last_quiz["current_step"] = "step4"
    update_last_start_quiz(user_id, last_quiz)

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–•–æ—á—É –≤—ã–≥–ª—è–¥–µ—Ç—å –º–æ–ª–æ–∂–µ –∏ —Å–≤–µ–∂–µ–µ üåü")],
            [KeyboardButton(text="–ù–∞–¥–æ–µ–ª–æ –∫–∞—à–ª—è—Ç—å –∏ –∑–∞–¥—ã—Ö–∞—Ç—å—Å—è ü§í")],
            [KeyboardButton(text="–ù–µ —Ö–æ—á—É —á—Ç–æ–±—ã –æ—Ç –º–µ–Ω—è –≤–æ–Ω—è–ª–æ üö´üëÉ")],
            [KeyboardButton(text="–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç ‚úçÔ∏è")],
        ],
        resize_keyboard=True,
    )
    await message.answer(STEP3_MESSAGE, reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ç–≤–µ—Ä—Ç–æ–≥–æ —à–∞–≥–∞ (–ø—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞ –æ—Ç –∫—É—Ä–µ–Ω–∏—è)
async def handle_quiz_step4(message: types.Message):
    user_id = message.from_user.id
    last_quiz = get_last_start_quiz(user_id)

    if message.text == "–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç ‚úçÔ∏è":
        last_quiz["current_step"] = "custom_reason_start_quiz"
        await message.answer(CUSTOM_REASON_PROMPT, reply_markup=ReplyKeyboardRemove())
    else:
        last_quiz["reason"] = message.text
        last_quiz["current_step"] = "finished"
        update_last_start_quiz(user_id, last_quiz)
        await finish_quiz(message)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–∞ –æ—Ç –∫—É—Ä–µ–Ω–∏—è
async def handle_custom_reason(message: types.Message):
    user_id = message.from_user.id
    last_quiz = get_last_start_quiz(user_id)
    last_quiz["reason"] = message.text
    update_last_start_quiz(user_id, last_quiz)
    await finish_quiz(message)


# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–≤–∏–∑–∞
async def finish_quiz(message: types.Message):
    user_id = message.from_user.id

    last_quiz = get_last_start_quiz(user_id)

    last_quiz["current_step"] = "finished"
    update_last_start_quiz(user_id, last_quiz)

    await message.answer(
        FINISH_QUIZ_MESSAGE, reply_markup=ReplyKeyboardRemove(), parse_mode="Markdown"
    )
