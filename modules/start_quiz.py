from aiogram import types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from db.data_manager import get_user_data, update_user_data, clear_user_data
from utils.content import (
    WELCOME_MESSAGE, STEP1_CIGARETTES_MESSAGE, STEP1_ELECTRONIC_MESSAGE, 
    STEP1_HOOKAH_MESSAGE, STEP1_IQOS_MESSAGE, STEP2_MESSAGE, 
    STEP3_MESSAGE, CUSTOM_REASON_PROMPT, FINISH_QUIZ_MESSAGE
)


async def start_quiz(message: types.Message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    user_data['current_step'] = 'step1'
    update_user_data(user_id, user_data)

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–°–∏–≥–∞—Ä–µ—Ç—ã")],
            [KeyboardButton(text="–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è —Å–∏–≥–∞—Ä–µ—Ç–∞ –∏–ª–∏ HQD")],
            [KeyboardButton(text="–ö–∞–ª—å—è–Ω")],
            [KeyboardButton(text="–ê–π–∫–æ—Å")]
        ],
        resize_keyboard=True
    )
    await message.answer(WELCOME_MESSAGE, reply_markup=keyboard, parse_mode='Markdown')

async def handle_quiz_step1(message: types.Message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    user_data['smoking_type'] = message.text
    user_data['current_step'] = 'step2'
    update_user_data(user_id, user_data)

    if message.text == "–°–∏–≥–∞—Ä–µ—Ç—ã":
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–î–æ 5 —à—Ç—É–∫ –≤ –¥–µ–Ω—å üòå")],
                [KeyboardButton(text="–î–æ 10, –Ω–æ –¥–µ—Ä–∂—É—Å—å üò¨")],
                [KeyboardButton(text="–ë–æ–ª—å—à–µ 15, —ç—Ç–æ —É–∂–µ —Å–µ—Ä—å–µ–∑–Ω–æ üòÖ")],
                [KeyboardButton(text="–¶–µ–ª–∞—è –ø–∞—á–∫–∞ –∏ –±–æ–ª—å—à–µ –≤ –¥–µ–Ω—å üö¨")]
            ],
            resize_keyboard=True
        )
        await message.answer(STEP1_CIGARETTES_MESSAGE, reply_markup=keyboard)
    
    elif message.text == "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è —Å–∏–≥–∞—Ä–µ—Ç–∞ –∏–ª–∏ HQD":
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ó–∞—Ä—è–∂–∞—é—Å—å —É—Ç—Ä–æ–º –∏–ª–∏ –≤–µ—á–µ—Ä–æ–º ‚ö°Ô∏è")],
                [KeyboardButton(text="–î—ã–º–ª—é –∫–∞–∂–¥—ã–µ 2-3 —á–∞—Å–∞ ‚è∞")],
                [KeyboardButton(text="–≠–ª–µ–∫—Ç—Ä–æ–Ω–∫–∞ –≤—Å–µ–≥–¥–∞ —Å–æ –º–Ω–æ–π, –∫–∞–∂–¥—ã–µ 20-30 –º–∏–Ω—É—Ç üîã")]
            ],
            resize_keyboard=True
        )
        await message.answer(STEP1_ELECTRONIC_MESSAGE, reply_markup=keyboard)
    
    elif message.text == "–ö–∞–ª—å—è–Ω":
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–¢–æ–ª—å–∫–æ –ø–æ –≤—ã—Ö–æ–¥–Ω—ã–º üå¥")],
                [KeyboardButton(text="2-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é üòé")],
                [KeyboardButton(text="–ö–∞–∂–¥—ã–π –¥–µ–Ω—å, –±–µ–∑ –∫–∞–ª—å—è–Ω–∞ –Ω–∏–∫—É–¥–∞ üí®")]
            ],
            resize_keyboard=True
        )
        await message.answer(STEP1_HOOKAH_MESSAGE, reply_markup=keyboard)
    
    elif message.text == "–ê–π–∫–æ—Å":
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ú–µ–Ω–µ–µ 5")],
                [KeyboardButton(text="–ú–µ–Ω–µ–µ 10")],
                [KeyboardButton(text="–ë–æ–ª–µ–µ 15")],
                [KeyboardButton(text="1 –ø–∞—á–∫–∞ –∏ –±–æ–ª–µ–µ –≤ –¥–µ–Ω—å")]
            ],
            resize_keyboard=True
        )
        await message.answer(STEP1_IQOS_MESSAGE, reply_markup=keyboard)

async def handle_quiz_step2(message: types.Message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    user_data['intensity'] = message.text
    user_data['current_step'] = 'step3'
    update_user_data(user_id, user_data)

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ú–µ–Ω—å—à–µ –≥–æ–¥–∞")],
            [KeyboardButton(text="1-3 –≥–æ–¥–∞")],
            [KeyboardButton(text="5-10 –ª–µ—Ç")],
            [KeyboardButton(text="–ë–æ–ª–µ–µ 10 –ª–µ—Ç")]
        ],
        resize_keyboard=True
    )
    await message.answer(STEP2_MESSAGE, reply_markup=keyboard)

async def handle_quiz_step3(message: types.Message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    user_data['period'] = message.text
    user_data['current_step'] = 'step4'
    update_user_data(user_id, user_data)

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ó–¥–æ—Ä–æ–≤—å–µ")],
            [KeyboardButton(text="–§–∏–Ω–∞–Ω—Å—ã")],
            [KeyboardButton(text="–°–æ—Ü–∏–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ")],
            [KeyboardButton(text="–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç")]
        ],
        resize_keyboard=True
    )
    await message.answer(STEP3_MESSAGE, reply_markup=keyboard)

async def handle_quiz_step4(message: types.Message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)

    if message.text == "–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç":
        user_data['current_step'] = 'custom_reason'
        update_user_data(user_id, user_data)
        await message.answer(CUSTOM_REASON_PROMPT, reply_markup=ReplyKeyboardRemove())
    else:
        user_data['reason'] = message.text
        await finish_quiz(message)

async def handle_custom_reason(message: types.Message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    user_data['reason'] = message.text
    update_user_data(user_id, user_data)
    await finish_quiz(message)

async def finish_quiz(message: types.Message):
    user_id = message.from_user.id
    # clear_user_data(user_id)  # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–≤–∏–∑–∞
    user_data = get_user_data(user_id)
    user_data['current_step'] = None
    update_user_data(user_id, user_data)

    await message.answer(FINISH_QUIZ_MESSAGE, reply_markup=ReplyKeyboardRemove(), parse_mode='Markdown')
